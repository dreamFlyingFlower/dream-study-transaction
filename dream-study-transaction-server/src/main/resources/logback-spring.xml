<?xml version="1.0" encoding="UTF-8"?>
<!-- debug:当设置为true时,将打印出logback内部日志,实时查看logback运行状态.默认为false -->
<!-- scan:当设置为true时,配置文档如果发生改变,将会被重新加载,默认为true -->
<!-- scanPeriod:当scan为true时,此属性生效,设置检测配置文档修改的时间间隔,默认时间爱单位是毫秒.默认的时间间隔为1分钟 -->
<configuration debug="true" scan="true" scanPeriod="60 seconds">
	<!-- 通用参数 -->
	<!--<include resource="org/springframework/boot/logging/logback/base.xml" /> -->
	<!-- <springProperty scope="context" name="logLevel" source="logging.level.root" /> -->
	<!-- <springProperty scope="context" name="logPath" source="logging.file.path" /> -->

	<!-- https://blog.csdn.net/IT_zhang81/article/details/99293472 -->

	<!-- name的值是变量的名称,value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义后,可以使“${}”来使用变量。 -->
	<property name="log.path" value="logs"/>

	<!--0. 日志格式和颜色渲染 -->
	<!-- 彩色日志依赖的渲染类 -->
	<conversionRule conversionWord="clr"
		converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
	<conversionRule conversionWord="wex"
		converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
	<conversionRule conversionWord="wEx"
		converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
	<!-- 彩色日志格式 -->
	<property name="CONSOLE_LOG_PATTERN"
		value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

	<!-- LevelFilter： 级别过滤器,根据日志级别进行过滤。如果日志级别等于配置级别,过滤器会根据onMath 和 onMismatch接收或拒绝日志。有以下子节点： -->
	<!-- <level>:设置过滤级别 -->
	<!-- <onMatch>:用于配置符合过滤条件的操作 -->
	<!-- <onMismatch>:用于配置不符合过滤条件的操作 -->
	<!-- ThresholdFilter:临界值过滤器,过滤掉低于指定临界值的日志。当日志级别等于或高于临界值时,过滤器返回NEUTRAL；当日志级别低于临界值时,日志会被拒绝。 -->

	<!-- 输出到控制台的日志格式 -->
	<appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>TRACE</level>
			<!-- 日志级别匹配或不匹配时的行为:DENY(拒绝)/ACCEPT(接收) -->
			<onMatch>ACCEPT</onMatch>
			<onMismatch>ACCEPT</onMismatch>
		</filter>
	</appender>

	<!-- 日志文件输出,如果不定义按spring boot默认输出 -->
	<appender name="dailyRollingFileAppender"
		class="ch.qos.logback.core.rolling.RollingFileAppender"
	>
		<File>${logPath}/moria.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- daily rollover -->
			<FileNamePattern>${logPath}/moria.%d{yyyy-MM-dd}.log</FileNamePattern>
			<!-- 若每天滚动日志,保留多少天的日志 -->
			<maxHistory>365</maxHistory>
		</rollingPolicy>
		<encoder>
			<Pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{35} - %msg %n</Pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>

	<!-- 2.1 level为 DEBUG 日志,时间滚动输出 -->
	<appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文档的路径及文档名 -->
		<file>${log.path}/debug.log</file>
		<!--日志文档输出格式 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
			<charset>UTF-8</charset> <!-- 设置字符集 -->
		</encoder>
		<!-- 日志记录器的滚动策略,按日期,按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 日志归档 -->
			<fileNamePattern>${log.path}/debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"
			>
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--日志文档保留天数 -->
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<!-- 此日志文档只记录debug级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>debug</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 2.2 level为 INFO 日志,时间滚动输出 -->
	<appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文档的路径及文档名 -->
		<file>${log.path}/info.log</file>
		<!--日志文档输出格式 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<!-- 日志记录器的滚动策略,按日期,按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 每天日志归档路径以及格式 -->
			<fileNamePattern>${log.path}/info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"
			>
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--日志文档保留天数 -->
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<!-- 此日志文档只记录info级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 2.3 level为 WARN 日志,时间滚动输出 -->
	<appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文档的路径及文档名 -->
		<file>${log.path}/warn.log</file>
		<!--日志文档输出格式 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
		<!-- 日志记录器的滚动策略,按日期,按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"
			>
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--日志文档保留天数 -->
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<!-- 此日志文档只记录warn级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>warn</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 2.4 level为 ERROR 日志,时间滚动输出 -->
	<appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文档的路径及文档名 -->
		<file>${log.path}/error.log</file>
		<!--日志文档输出格式 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
		<!-- 日志记录器的滚动策略,按日期,按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"
			>
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--日志文档保留天数 -->
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<!-- 此日志文档只记录ERROR级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 2.5 所有 除了DEBUG级别的其它高于DEBUG的 日志,记录到一个文件 -->
	<appender name="ALL_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文档的路径及文档名 -->
		<file>${log.path}/all.log</file>
		<!--日志文档输出格式 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
		<!-- 日志记录器的滚动策略,按日期,按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/all-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"
			>
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--日志文档保留天数 -->
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<!-- 此日志文档记录除了DEBUG级别的其它高于DEBUG的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>DENY</onMatch>
			<onMismatch>ACCEPT</onMismatch>
		</filter>
	</appender>

	<!-- 不同环境配置不同的日志级别 -->
	<!-- 开发环境日志级别 -->
	<springProfile name="dev">
		<!-- 基本策略:默认日志级别 -->
		<root level="${logLevel}">
			<appender-ref ref="consoleAppender"/>
		</root>
		<!-- 定制化日志级别 -->
		<logger name="com.wy" level="DEBUG"/>
		<logger name="mapper" level="DEBUG"/>
		<logger name="org.springframework" level="INFO"/>
	</springProfile>

	<!-- 开发环境日志级别 -->
	<springProfile name="test">
		<!-- 基本策略:默认日志级别 -->
		<root level="${logLevel}">
			<appender-ref ref="consoleAppender"/>
		</root>
		<!-- 定制化日志级别 -->
		<logger name="com.wy" level="DEBUG"/>
		<logger name="mapper" level="DEBUG"/>
		<logger name="org.springframework" level="INFO"/>
	</springProfile>

	<!-- 生产环境日志级别 -->
	<springProfile name="prod">
		<root level="${logLevel}">
			<appender-ref ref="consoleAppender"/>
			<appender-ref ref="dailyRollingFileAppender"/>
		</root>
		<logger name="com.wy" level="DEBUG"/>
		<logger name="mapper" level="DEBUG"/>
		<logger name="org.springframework" level="INFO"/>
	</springProfile>
</configuration>